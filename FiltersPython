# Filter Popup Code:
import arcpy
import arcpy.mp
import calendar
import psycopg2
import tkinter as tk
from tkinter import ttk
def filterPopup():
    # Create GUI for filter selection
    root = tk.Tk()
    root.title("Filter Selection")
    # Function to generate heat map based on filter selections
    def generate_heatmap():
        try:
            # Retrieve filter selections
            region_option = RegionDropdown_var.get()
            arcpy.AddMessage("Region Selected: " + region_option)
            
            # Define the map project
            aprx = arcpy.mp.ArcGISProject("CURRENT")
            mapview = aprx.activeMap
            workspace = r"C:\Users\sandbox4\Documents\ArcGIS\Projects\GISApplication\GISApplication.gdb"
            out_feature_class = "Rectangles"
            spatial_reference = arcpy.SpatialReference(4326)
            # Check if the feature class already exists
            fc_full_path = os.path.join(workspace, out_feature_class)
            # If the feature class exists, delete its content
            if arcpy.Exists(fc_full_path):
                arcpy.DeleteFeatures_management(fc_full_path)
                arcpy.AddField_management(fc_full_path, 'RegionName', 'TEXT')
            
            # Create the feature class if it does not exist
            else:
                arcpy.CreateFeatureclass_management(workspace, out_feature_class, "POLYGON", spatial_reference=spatial_reference)
            arcpy.AddMessage("Feature class created successfully.")
            # Define the corners of rectangles for demonstration
            rectangle_coords = {
                'NORTHEAST': {'coords': (-81.26, 39.20, -66.31, 48.28), 'name': 'Northeast'},
                'WEST': {'coords': (-125.70, 29.93, -101.68, 49.81), 'name': 'West'},
                'SOUTH': {'coords': (-108.68, 24.5, -73.19, 39.98), 'name': 'South'},
                'MIDWEST': {'coords': (-104.58, 36.72, -79.49, 49.28), 'name': 'Midwest'},
            }
            
            with arcpy.da.InsertCursor(fc_full_path, ["SHAPE@", "RegionName"]) as cursor:
                # Insert rectangles based on the selected regionT
                region_data = rectangle_coords.get(region_option, rectangle_coords[region_option])
                min_x, min_y, max_x, max_y = region_data['coords']
                polygon = arcpy.Polygon(arcpy.Array([arcpy.Point(min_x, min_y),
                                                     arcpy.Point(min_x, max_y),
                                                     arcpy.Point(max_x, max_y),
                                                     arcpy.Point(max_x, min_y)]), spatial_reference)
                cursor.insertRow([polygon, region_data['name']])
            
            arcpy.AddMessage("Rectangle displayed")
            
        
             # Add the feature class as a layer to the map
            if mapview.listLayers(out_feature_class):
                for lyr in mapview.listLayers(out_feature_class):
                    mapview.removeLayer(lyr)
            map_layer = mapview.addDataFromPath(fc_full_path)
            map_layer.visible = True
            map_layer.transparency = 80
            #arcpy.RefreshActiveView()
            #arcpy.RefreshTOC()
        except Exception as e:
            arcpy.AddError(f"An error occurred: {str(e)}")
            print("Error:", e)
        finally:
            root.destroy()
            
    #Connection to the database
    conn = psycopg2.connect(
            dbname="gisapplication",
            user="postgres",
            password="admin",
            host="localhost",
            port="5432"
        )
    #create cursor object
    cursor = conn.cursor()           
    
    # Textbox options
    #Date
    ttk.Label(root, text="Date:").grid(row=1, column=0, padx=5, pady=5, sticky="w")
    #Date = ttk.Button(root, text="Select Date", command=generate_calendar(2022, 4)
    Date_var = tk.StringVar()
    Date = ttk.Entry(root, textvariable=Date_var)
    Date.grid(row=1, column=1, padx=5, pady=5, sticky="w")    
    
    
    # Dropdown menus for filter selection
    # Screen Name
    ttk.Label(root, text="Screen Name:").grid(row=0, column=0, padx=5, pady=5, sticky="w")
    #Execute sql query to grab all data in primary topic row
    cursor.execute("SELECT screenname FROM users")
    #Get all rows
    rows = cursor.fetchall()
    screenName_options = [row[0] for row in rows]
    screenNameDropdown_var = tk.StringVar(root)
    screenNameDropdown = ttk.Combobox(root, textvariable=screenNameDropdown_var, values=screenName_options)
    screenNameDropdown.grid(row=0, column=1, padx=5, pady=5, sticky="w")
    
    #Map Type
    ttk.Label(root, text="Map Type:").grid(row=2, column=0, padx=5, pady=5, sticky="w")
    map_options = ["Heat Map", "Bar Chart", "Pie Chart"]
    MapDropdown_var = tk.StringVar(root)
    MapDropdown = ttk.Combobox(root, textvariable=MapDropdown_var, values=map_options)
    MapDropdown.grid(row=2, column=1, padx=5, pady=5, sticky="w")
    #Region
    ttk.Label(root, text="Region:").grid(row=3, column=0, padx=5, pady=5, sticky="w")
    #Execute sql query to grab all data in primary topic row
    cursor.execute("SELECT region FROM regions")
    #Get all rows
    rows = cursor.fetchall()
    region_options = [row[0] for row in rows]
    RegionDropdown_var = tk.StringVar(root)
    RegionDropdown = ttk.Combobox(root, textvariable=RegionDropdown_var, values=region_options)
    RegionDropdown.grid(row=3, column=1, padx=5, pady=5, sticky="w")
    
    #Primary Topic 
    ttk.Label(root, text="Primary Topic:").grid(row=4, column=0, padx=5, pady=5, sticky="w")
    #Execute sql query to grab all data in primary topic row
    cursor.execute("SELECT topic FROM tweetanalysis")
    #Get all rows
    rows = cursor.fetchall()
    topic_options = [row[0] for row in rows]
    TopicDropdown_var = tk.StringVar(root)
    TopicDropdown = ttk.Combobox(root, textvariable=TopicDropdown_var, values=topic_options)
    TopicDropdown.grid(row=4, column=1, padx=5, pady=5, sticky="w")
    
    #Gender
    ttk.Label(root, text="Gender:").grid(row=5, column=0, padx=5, pady=5, sticky="w")
    gender_options = ["Male", "Female"]
    GenderDropdown_var = tk.StringVar(root)
    GenderDropdown = ttk.Combobox(root, textvariable=GenderDropdown_var, values=gender_options)
    GenderDropdown.grid(row=5, column=1, padx=5, pady=5, sticky="w")
    
    #Standings (Win or Loss)
    ttk.Label(root, text="Standing:").grid(row=6, column=0, padx=5, pady=5, sticky="w")
    standing_options = ["Won", "Lost"]
    StandingDropdown_var = tk.StringVar(root)
    StandingDropdown = ttk.Combobox(root, textvariable=StandingDropdown_var, values=standing_options)
    StandingDropdown.grid(row=6, column=1, padx=5, pady=5, sticky="w")
    
    #Party
    ttk.Label(root, text="Party:").grid(row=7, column=0, padx=5, pady=5, sticky="w")
    party_options = ["Republican", "Democratic"]
    PartyDropdown_var = tk.StringVar(root)
    PartyDropdown = ttk.Combobox(root, textvariable=PartyDropdown_var, values=party_options)
    PartyDropdown.grid(row=7, column=1, padx=5, pady=5, sticky="w")
    
    #Hashtags - dynamically fill from database
    ttk.Label(root, text="Hashtags:").grid(row=8, column=0, padx=5, pady=5, sticky="w")
    #Execute sql query to grab all data in primary topic row
    cursor.execute("SELECT hashtag FROM hashtags")
    #Get all rows
    rows = cursor.fetchall()
    hashtag_options = [row[0] for row in rows]
    HashtagDropdown_var = tk.StringVar(root)
    HashtagDropdown = ttk.Combobox(root, textvariable=HashtagDropdown_var, values=hashtag_options)
    HashtagDropdown.grid(row=8, column=1, padx=5, pady=5, sticky="w")
    
    # Checkbox for numeric filters
    ttk.Label(root, text="Numeric Filters:").grid(row=9, column=0, padx=5, pady=5, sticky="w")
    numeric_options = ["Retweets", "Replies", "Favorites", "Mentions", "Quotes", "Sentiment", "Toxicity"]
    checkbox_vars = {}
    for i, option in enumerate(numeric_options, start=10):
        var = tk.BooleanVar()
        checkbox_vars[option] = var
        checkbox = ttk.Checkbutton(root, text=option, variable=var)
        checkbox.grid(row=i, column=0, columnspan=2, padx=5, pady=2, sticky="w")
    
    # Add button to trigger map generation
    generate_button = ttk.Button(root, text="Generate Map", command=generate_heatmap)
    generate_button.grid(row=18, column=0, columnspan=1, padx=5, pady=5)
    
    
    root.mainloop()
    
# Call the function to display popup with filters
filterPopup()
